@page "/books/"
@attribute [Authorize]

@inject IBookRepository _repo

<h3 class="card-title">Index</h3>

@if (Model == null)
{
    <LoadingMessage Message="Loading Books" />
}
else
{
<AuthorizeView Roles="Administrator">
    <a href="/books/create" class="btn btn-primary">
        <span class="oi oi-plus">
        </span> Create new Book
    </a>
    <hr />
    <br />
</AuthorizeView>

    @if (Model.Count < 1)
    {
        <LoadingMessage Message="There are no books in the database." />
    }
    else
    {
        <table class="table table-responsive">
            <thead>
                <tr>
                    <th></th>
                    <th>Title</th>
                    <th>Price</th>
                    <th>Author</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var book in Model)
                {
                    <tr>
                        <td>
                            <img src="uploads/@book.Image" style="height:50px; width:50px" />
                        </td>
                        <td>@book.Title</td>
                        <td>@string.Format("{0:C}", book.Price)</td>
                        <td>@book.Author.FirstName @book.Author.LastName</td>
                        <td>
                            <a href="/books/view/@book.Id" class="btn btn-primary"><span class="oi oi-book"></span></a>
                            <AuthorizeView Roles="Administrator">
                                <a href="/books/edit/@book.Id" class="btn btn-warning"><span class="oi oi-pencil"></span></a>
                                <a href="/books/delete/@book.Id" class="btn btn-danger"><span class="oi oi-delete"></span></a>
                            </AuthorizeView>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    private IList<Book> Model;

    protected async override Task OnInitializedAsync()
    {
        Model = await _repo.Get(Endpoints.BooksEndpoint);
    }

}